<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.thymeleaf.dao.EmployeeDao">
    <resultMap id="employeeDepartmentResultMap" type="com.thymeleaf.dto.EmployeeDepartmentDto">
        <result property="employee_id" column="employee_id" />
        <result property="employee_name" column="employee_name" />
        <result property="address" column="address" />
        <result property="sex" column="sex" />
        <result property="department_name" column="department_name" />
    </resultMap>
    <select id="getEmployeesWithDepartments" resultMap="employeeDepartmentResultMap">
        SELECT e.employee_id, e.employee_name, e.address,
               e.sex, d.department as department_name
        FROM employee e
                 left JOIN department d ON e.department = d.id
    </select>
    <select id="search" parameterType="map" resultMap="employeeDepartmentResultMap">
        SELECT e.employee_id, e.employee_name, e.address,
        e.sex, d.department as department_name
        FROM employee e
        left JOIN department d ON e.department = d.id
        <where>
            <if test="employee_id!=null and employee_id!='' ">
                AND employee_id=#{employee_id}
            </if>
            <if test="employee_name!=null and employee_name !='' ">
                AND employee_name LIKE concat('%',#{employee_name},'%')
            </if>
            <if test="department!=null and department!='' ">
                AND d.department LIKE concat('%',#{department},'%')
            </if>
            <if test="address!=null and address!='' ">
                AND address LIKE concat('%',#{address},'%')
            </if>
        </where>
    </select>
    <insert id="save" parameterType="Employee">
        insert into `employee`(employee_id,employee_name,employee_password,sex,address,mail_address,phone_number,department,job_title,employment_status,hire_date,birth_date,empInsuranceNumber,pensionNumber,positionRank,resume)
        values(#{employee_id},#{employee_name},#{employee_password},#{sex},#{address},#{mail_address},#{phone_number},#{department},#{job_title},#{employment_status},#{hire_date},#{birth_date},#{empInsuranceNumber},#{pensionNumber},#{positionRank},#{resume})
    </insert>
    <select id="findById" parameterType="Integer" resultType="Employee">
        select * from employee where employee_id=#{employee_id}
    </select>
    <update id="update" parameterType="map">
        update `employee` set employee_name=#{employee_name},employee_password=#{employee_password},
                              sex=#{sex},address=#{address},mail_address=#{mail_address},phone_number=#{phone_number},department=#{department},
                              job_title=#{job_title},employment_status=#{employment_status},hire_date=#{hire_date},
                              birth_date=#{birth_date},empInsuranceNumber=#{empInsuranceNumber},pensionNumber=#{pensionNumber},positionRank=#{positionRank},resume=#{resume}
        where employee_id=#{employee_id}
    </update>
    <delete id="delete" parameterType="Integer">
        delete from `employee` where employee_id=#{employee_id}
    </delete>
    <select id="getAllAttendances"  parameterType="map" resultType="Attendance">
        select * from `attendance` where employee_id=#{employee_id} AND YEAR(attendance_date) = YEAR(CURDATE())
                                     AND MONTH(attendance_date) = MONTH(CURDATE())
        ORDER BY attendance_date ASC
    </select>
    <select id="searchDate" parameterType="map" resultType="Attendance">
        SELECT * FROM `attendance`
        <where>
            <if test="year != null">
                AND YEAR(attendance_date) = #{year}
            </if>
            <if test="month != null">
                AND MONTH(attendance_date) = #{month}
            </if>
            <if test="day != null">
                AND DAY(attendance_date) = #{day}
            </if>
        and employee_id=#{employee_id}
        </where>
        ORDER BY attendance_date ASC
    </select>
    <insert id="clock" parameterType="Attendance">
        insert into `attendance`(employee_id,attendance_date,status,start_date,end_date)
        values (#{employee_id},#{attendance_date},#{status},#{start_date},#{end_date})
    </insert>
    <select id="findByRecord" parameterType="Integer" resultType="Attendance">
select * from `attendance` where record_id=#{record_id}
    </select>
    <update id="updateAttendance" parameterType="Attendance" >
        update `attendance` set
                                status=#{status},
                                start_date=#{start_date},
                                end_date=#{end_date}
        where record_id=#{record_id}
        </update>
    <select id="hasAttendanceRecords" resultType="boolean" parameterType="map">
        SELECT COUNT(*) > 0 FROM attendance
        WHERE employee_id = #{employeeId}
            AND YEAR(attendance_date) = #{year}
          AND MONTH(attendance_date) = #{month}
    </select>
    <select id="getAttendancesInRange" resultType="Attendance" parameterType="map">
        SELECT * FROM attendance
        WHERE employee_id = #{employeeId}
        ORDER BY attendance_date DESC
            LIMIT #{startRow}, #{endRow}
    </select>

</mapper>